import{_ as s,c as i,o as e,V as a}from"./chunks/framework.sSymVGL-.js";const c=JSON.parse('{"title":"Templating - SEO Fields","description":"","frontmatter":{"title":"Templating - SEO Fields","prev":false,"next":false},"headers":[],"relativePath":"templating.md","filePath":"templating.md"}'),t={name:"templating.md"},n=a(`<h1 id="templating" tabindex="-1">Templating <a class="header-anchor" href="#templating" aria-label="Permalink to &quot;Templating&quot;">​</a></h1><h2 id="template-hook" tabindex="-1">Template hook <a class="header-anchor" href="#template-hook" aria-label="Permalink to &quot;Template hook&quot;">​</a></h2><p>To put SEO Fields on your html, just add <code>{% hook &#39;seo-fields&#39; %}</code> within the <code>&lt;head&gt;</code> tag in your layout.</p><p>If you want more control over what the plugin output, you can include your own snippet instead of the templat hook. Have a look at the <a href="https://github.com/studioespresso/craft-seo-fields/blob/master/src/templates/_meta.twig" target="_blank" rel="noreferrer">default template</a> to get you started.</p><p>Note that the field looks for a field called <code>seo</code>. If it doesn&#39;t find that, it will not output anymore.</p><p><a href="./field.html#field">More information on that here.</a></p><h2 id="overwriting-field-values" tabindex="-1">Overwriting field values <a class="header-anchor" href="#overwriting-field-values" aria-label="Permalink to &quot;Overwriting field values&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">Upgrading to version 4.0.0</p><p>The way to overwrite field values changes in version 4.0. For example: instead of calling <code>entry.seo.setTwitterTitle()</code>, you should now call <code>entry.setTwitterTitle()</code>. The same goes for other methods.</p><p>Both <code>entry.setFacebookImage()</code> and <code>entry.setTwitterImage()</code> now only take an Asset object, where they previously accept an Asset, an id or on AssetQuery.</p></div><p>Next to the site defaults and the field, you might also want to use text and images from another fields.</p><p>To do this, use the following twig functions:</p><div class="language-twig vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">twig</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setMetaTitle(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;New title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setMetaDescription(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom meta description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setFacebookTitle(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Facebook title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setFacebookDescription(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;custom description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setTwitterTitle(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Twitter title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setTwitterDescription(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Just for twitter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) %}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// Overwriting the image fields can be done by passing an Asset elemnt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setFacebookImage(entry.assetField.one()) %}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry.setTwitterImage(entry.assetField.one()) %}</span></span></code></pre></div><p>This is a normal Twig template so the usual conditionals and operators work here. You can use these for the fields that need a text value. For the OG and Twitter images, you can pass an <code>Asset</code> to <code>meta.getOgImage()</code>, eg: <code>{% set ogImage = meta.getOgImage(entry.overviewImage.one()) %}</code>.</p><h2 id="support-for-custom-elements" tabindex="-1">Support for custom elements <a class="header-anchor" href="#support-for-custom-elements" aria-label="Permalink to &quot;Support for custom elements&quot;">​</a></h2><p>Out of the box SEO Fields has support for:</p><ul><li>Craft&#39;s Entries</li><li>Craft&#39;s Categories</li><li>Commerce <a href="https://plugins.craftcms.com/commerce" target="_blank" rel="noreferrer">Products</a></li><li>Solspce Calendar <a href="https://plugins.craftcms.com/calendar" target="_blank" rel="noreferrer">Events</a></li></ul><p><em>If you have a plugin on the store that has a custom element and you want SEO Fields to add support for it, feel free to <a href="mailto:jan@studioespresso.co" target="_blank" rel="noreferrer">get in touch</a></em></p><p>If you have a custom element of your own and you want to add support for SEO Fields, pass the element&#39;s class to the following event:</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SeoFields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SeoFields</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EVENT_SEOFIELDS_REGISTER_ELEMENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RegisterSeoElementEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $event) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($elements) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        $event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elements </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array_merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elements,[</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Product</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,18),l=[n];function h(p,o,r,k,d,E){return e(),i("div",null,l)}const y=s(t,[["render",h]]);export{c as __pageData,y as default};
